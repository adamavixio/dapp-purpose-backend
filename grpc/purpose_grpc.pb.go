// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: grpc/purpose.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PurposeClient is the client API for Purpose service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurposeClient interface {
	MissionStream(ctx context.Context, in *MissionStreamRequest, opts ...grpc.CallOption) (Purpose_MissionStreamClient, error)
	AddMission(ctx context.Context, in *AddMissionRequest, opts ...grpc.CallOption) (*AddMissionResponse, error)
	RemoveMission(ctx context.Context, in *RemoveMissionRequest, opts ...grpc.CallOption) (*RemoveMissionResponse, error)
}

type purposeClient struct {
	cc grpc.ClientConnInterface
}

func NewPurposeClient(cc grpc.ClientConnInterface) PurposeClient {
	return &purposeClient{cc}
}

func (c *purposeClient) MissionStream(ctx context.Context, in *MissionStreamRequest, opts ...grpc.CallOption) (Purpose_MissionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Purpose_ServiceDesc.Streams[0], "/purpose.Purpose/MissionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &purposeMissionStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Purpose_MissionStreamClient interface {
	Recv() (*MissionStreamResponse, error)
	grpc.ClientStream
}

type purposeMissionStreamClient struct {
	grpc.ClientStream
}

func (x *purposeMissionStreamClient) Recv() (*MissionStreamResponse, error) {
	m := new(MissionStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *purposeClient) AddMission(ctx context.Context, in *AddMissionRequest, opts ...grpc.CallOption) (*AddMissionResponse, error) {
	out := new(AddMissionResponse)
	err := c.cc.Invoke(ctx, "/purpose.Purpose/AddMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purposeClient) RemoveMission(ctx context.Context, in *RemoveMissionRequest, opts ...grpc.CallOption) (*RemoveMissionResponse, error) {
	out := new(RemoveMissionResponse)
	err := c.cc.Invoke(ctx, "/purpose.Purpose/RemoveMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurposeServer is the server API for Purpose service.
// All implementations must embed UnimplementedPurposeServer
// for forward compatibility
type PurposeServer interface {
	MissionStream(*MissionStreamRequest, Purpose_MissionStreamServer) error
	AddMission(context.Context, *AddMissionRequest) (*AddMissionResponse, error)
	RemoveMission(context.Context, *RemoveMissionRequest) (*RemoveMissionResponse, error)
	mustEmbedUnimplementedPurposeServer()
}

// UnimplementedPurposeServer must be embedded to have forward compatible implementations.
type UnimplementedPurposeServer struct {
}

func (UnimplementedPurposeServer) MissionStream(*MissionStreamRequest, Purpose_MissionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MissionStream not implemented")
}
func (UnimplementedPurposeServer) AddMission(context.Context, *AddMissionRequest) (*AddMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMission not implemented")
}
func (UnimplementedPurposeServer) RemoveMission(context.Context, *RemoveMissionRequest) (*RemoveMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMission not implemented")
}
func (UnimplementedPurposeServer) mustEmbedUnimplementedPurposeServer() {}

// UnsafePurposeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurposeServer will
// result in compilation errors.
type UnsafePurposeServer interface {
	mustEmbedUnimplementedPurposeServer()
}

func RegisterPurposeServer(s grpc.ServiceRegistrar, srv PurposeServer) {
	s.RegisterService(&Purpose_ServiceDesc, srv)
}

func _Purpose_MissionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MissionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PurposeServer).MissionStream(m, &purposeMissionStreamServer{stream})
}

type Purpose_MissionStreamServer interface {
	Send(*MissionStreamResponse) error
	grpc.ServerStream
}

type purposeMissionStreamServer struct {
	grpc.ServerStream
}

func (x *purposeMissionStreamServer) Send(m *MissionStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Purpose_AddMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurposeServer).AddMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/purpose.Purpose/AddMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurposeServer).AddMission(ctx, req.(*AddMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purpose_RemoveMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurposeServer).RemoveMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/purpose.Purpose/RemoveMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurposeServer).RemoveMission(ctx, req.(*RemoveMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Purpose_ServiceDesc is the grpc.ServiceDesc for Purpose service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Purpose_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "purpose.Purpose",
	HandlerType: (*PurposeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMission",
			Handler:    _Purpose_AddMission_Handler,
		},
		{
			MethodName: "RemoveMission",
			Handler:    _Purpose_RemoveMission_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MissionStream",
			Handler:       _Purpose_MissionStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/purpose.proto",
}
